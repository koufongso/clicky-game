{"version":3,"sources":["img sync /^/.*$","img/buffalo-head.png","img/camel-head.png","img/double-fish.png","img/eagle-head.png","img/eating-pelican.png","img/elephant-head.png","img/kangaroo.png","img/koala.png","img/labrador-head.png","img/snake-spiral.png","img/snake-tongue.png","img/spiked-dragon-head.png","components/Navbar.js","components/Jumbotron.js","components/Card.js","components/CardList.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Navbar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Jumbotron","style","backgroundColor","color","Card","props","state","image","src","require","this","onClick","handleClick","alt","React","Component","CardList","name","clicked","includes","gameOver","setState","list","length","gameWin","shuffle","alert","stratGame","score","highestScore","newList","i","j","Math","floor","random","x","key","imageArray","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a72aa9fa.chunk.js","sourcesContent":["var map = {\n\t\"./buffalo-head.png\": 17,\n\t\"./camel-head.png\": 18,\n\t\"./double-fish.png\": 19,\n\t\"./eagle-head.png\": 20,\n\t\"./eating-pelican.png\": 21,\n\t\"./elephant-head.png\": 22,\n\t\"./kangaroo.png\": 23,\n\t\"./koala.png\": 24,\n\t\"./labrador-head.png\": 25,\n\t\"./snake-spiral.png\": 26,\n\t\"./snake-tongue.png\": 27,\n\t\"./spiked-dragon-head.png\": 28\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 16;","module.exports = __webpack_public_path__ + \"static/media/buffalo-head.df56e6b6.png\";","module.exports = __webpack_public_path__ + \"static/media/camel-head.4b355aaf.png\";","module.exports = __webpack_public_path__ + \"static/media/double-fish.7a2edb81.png\";","module.exports = __webpack_public_path__ + \"static/media/eagle-head.6ef7ccd5.png\";","module.exports = __webpack_public_path__ + \"static/media/eating-pelican.7513d3bf.png\";","module.exports = __webpack_public_path__ + \"static/media/elephant-head.38543fd0.png\";","module.exports = __webpack_public_path__ + \"static/media/kangaroo.7be7fcd0.png\";","module.exports = __webpack_public_path__ + \"static/media/koala.dffdf4e4.png\";","module.exports = __webpack_public_path__ + \"static/media/labrador-head.4173d638.png\";","module.exports = __webpack_public_path__ + \"static/media/snake-spiral.5517a7bf.png\";","module.exports = __webpack_public_path__ + \"static/media/snake-tongue.62bb9a6e.png\";","module.exports = __webpack_public_path__ + \"static/media/spiked-dragon-head.c929d3d4.png\";","import React from 'react';\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary fixed-top\">\r\n            <a className=\"navbar-brand\" href=\"/\">Clicky Game</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                <div className=\"navbar-nav\">\r\n                    {/* <a className=\"nav-item nav-link active\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a> */}\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\" style={{backgroundColor:\"#2c323c\",color:\"white\"}}>\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">Clicky Game!</h1>\r\n                <p className=\"lead\">Try to click every picture ONLY ONE TIME. Game end when you click the same picture twice.</p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport './style.css'\r\n\r\nclass Card extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {image:props.image}\r\n    }\r\n\r\n\r\n    render() {\r\n        return <img className=\"click-item\" src={require(`../img/${this.state.image}`)} onClick = {()=> this.props.handleClick(this.state.image)} alt=\"\"></img>;\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\nimport './style.css'\r\n\r\nclass CardList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { list: props.list, clicked: [], highestScore: 0 }\r\n    }\r\n\r\n    /**\r\n     * cards click listenr\r\n     * return the click card's name\r\n     */\r\n    handleClick = (name) => {\r\n        // console.log(name);\r\n        if (this.state.clicked.includes(name)) {\r\n            this.gameOver();\r\n        } else {\r\n            this.setState({clicked: [...this.state.clicked, name]},()=>{ // check game score\r\n                if(this.state.list.length===this.state.clicked.length){\r\n                    this.gameWin();\r\n                }else{\r\n                    this.shuffle();\r\n                } \r\n            });\r\n        }\r\n    }\r\n\r\n    gameOver = () =>{\r\n        alert(\"GameOver!\");\r\n        this.stratGame();\r\n    }\r\n\r\n    gameWin = () =>{\r\n        alert(\"Congratulation, you win the game!\")\r\n        this.stratGame();\r\n    }\r\n\r\n    stratGame = () => {\r\n        let score = this.state.clicked.length;\r\n        if (score > this.state.highestScore) this.setState({ highestScore: score })\r\n        this.setState({ clicked: [] }) // reset clicked record\r\n    }\r\n\r\n    shuffle = () =>{\r\n        let newList = [...this.state.list];\r\n        for (let i = newList.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            [newList[i], newList[j]] = [newList[j], newList[i]];\r\n        }\r\n        this.setState({ list: newList });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"row justify-content-md-center\">\r\n                    <div className=\"col-2\">Score <span>{this.state.clicked.length}/{this.state.list.length}</span></div>\r\n                    <div className=\"col-2\">Highest Score <span>{this.state.highestScore}</span></div>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"row\">\r\n                    {this.state.list.map(x => <Card key={x} image={x} handleClick={this.handleClick}></Card>)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CardList;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Jumbotron from './components/Jumbotron';\nimport CardList from './components/CardList'\n\nlet imageArray = [\"buffalo-head.png\", \"camel-head.png\", \"double-fish.png\", \"eagle-head.png\",\n  \"eating-pelican.png\", \"elephant-head.png\", \"kangaroo.png\", \"koala.png\",\n  \"labrador-head.png\", \"snake-spiral.png\", \"snake-tongue.png\", \"spiked-dragon-head.png\"]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar></Navbar>\n      <Jumbotron></Jumbotron>\n      <div className=\"container\">\n          <CardList list={imageArray}></CardList>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}